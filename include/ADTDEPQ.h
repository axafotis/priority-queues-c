////////////////////////////////////////////////////////////////////////////////
//
// ADT Double Ended Priority Queue
//
// Abstract ουρά προτεραιότητας δύο άκρων. Σε κάθε remove αφαιρείται
// είτε το μεγαλύτερο είτε το μιρκότερο στοιχείο (με βάση τη συνάρτηση compare).
//
////////////////////////////////////////////////////////////////////////////////

#pragma once // #include το πολύ μία φορά

#include "common_types.h"


// Μία double-ended ουρά προτεραιότητας αναπαριστάται από τον τύπο DEPQ

typedef struct depq* DEPQ;


// Δημιουργεί και επιστρέφει μια νέα ουρά προτεραιότητας, της οποίας τα στοιχεία συγκρίνονται με βάση τη συνάρτηση compare.
// Αν destroy_value != NULL, τότε καλείται destroy_value(value) κάθε φορά που αφαιρείται ένα στοιχείο.

DEPQ depq_create(CompareFunc compare, DestroyFunc destroy_value);

// Επιστρέφει τον αριθμό στοιχείων που περιέχει η ουρά depq

int depq_size(DEPQ depq);

// Επιστρέφει το μεγαλύτερο στοιχείο της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

Pointer depq_max(DEPQ depq);

// Επιστρέφει το μικρότερο στοιχείο της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

Pointer depq_min(DEPQ depq);

// Προσθέτει την τιμή value στην ουρά depq.

void depq_insert(DEPQ depq, Pointer value);

// Αφαιρεί την μεγαλύτερη τιμή της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

void depq_remove_max(DEPQ depq);

// Αφαιρεί τη μικρότερο τιμή της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

void depq_remove_min(DEPQ depq);

// Αλλάζει τη συνάρτηση που καλείται σε κάθε αφαίρεση/αντικατάσταση στοιχείου σε
// destroy_value. Επιστρέφει την προηγούμενη τιμή της συνάρτησης.

DestroyFunc depq_set_destroy_value(DEPQ depq, DestroyFunc destroy_value);

// Ελευθερώνει όλη τη μνήμη που δεσμεύει η ουρά depq.
// Οποιαδήποτε λειτουργία πάνω στη ουρά μετά το destroy είναι μη ορισμένη.

void depq_destroy(DEPQ depq);
