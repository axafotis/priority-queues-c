//////////////////////////////////////////////////////////////////////////////
//
// ADT k-Priority Queue
//
// Abstract k-ουρά προτεραιότητας, η οποία παρέχει πρόσβαση τόσο στο μέγιστο,
// όσο και στο k-οστό σε διάταξη στοιχείο (για σταθερό k). Η αφαίρεση γίνεται
// στο μέγιστο στοιχείο.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once // #include το πολύ μία φορά

#include "common_types.h"


// Μία k-ουρά προτεραιότητας αναπαριστάται από τον τύπο KPQ

typedef struct kpq* KPQ;


// Δημιουργεί και επιστρέφει μια νέα k-ουρά προτεραιότητας, για το k που δίνεται
// ως όρισμα, της οποίας τα στοιχεία συγκρίνονται με βάση τη συνάρτηση compare.
// Αν destroy_value != NULL, τότε καλείται destroy_value(value) κάθε φορά που αφαιρείται ένα στοιχείο.

KPQ kqp_create(CompareFunc compare, int k, DestroyFunc destroy_value);

// Επιστρέφει τον αριθμό στοιχείων που περιέχει η ουρά kqp

int kqp_size(KPQ kqp);

// Επιστρέφει το μεγαλύτερο στοιχείο της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

Pointer kqp_max(KPQ kqp);

// Επιστρέφει το k-οστό μεγαλύτερο στοιχείο της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι λιγότερα από k στοιχεία)

Pointer kqp_k_th(KPQ kqp);

// Προσθέτει την τιμή value στην ουρά kqp.

void kqp_insert(KPQ kqp, Pointer value);

// Αφαιρεί το μεγαλύτερο στοιχείο της ουράς (μη ορισμένο αποτέλεσμα αν η ουρά είναι κενή)

void kqp_remove_max(KPQ kqp);

// Αλλάζει τη συνάρτηση που καλείται σε κάθε αφαίρεση/αντικατάσταση στοιχείου σε
// destroy_value. Επιστρέφει την προηγούμενη τιμή της συνάρτησης.

DestroyFunc kqp_set_destroy_value(KPQ kqp, DestroyFunc destroy_value);

// Ελευθερώνει όλη τη μνήμη που δεσμεύει η ουρά kqp.
// Οποιαδήποτε λειτουργία πάνω στη ουρά μετά το destroy είναι μη ορισμένη.

void kqp_destroy(KPQ kqp);
